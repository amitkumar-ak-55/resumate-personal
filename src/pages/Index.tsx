import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Header } from '@/components/Header';
import { ResumeUploader } from '@/components/ResumeUploader';
import { JobDescriptionInput } from '@/components/JobDescriptionInput';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { useToast } from '@/hooks/use-toast';
import { Zap, Download } from 'lucide-react';
import { Card } from '@/components/ui/card';

interface OptimizationResult {
  fileName: string;
  downloadUrl: string;
}

const Index = () => {
  const [resumeFile, setResumeFile] = useState<File | null>(null);
  const [jobDescription, setJobDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [loadingStage, setLoadingStage] = useState<'extracting' | 'analyzing' | 'optimizing' | 'generating'>('extracting');
  const [results, setResults] = useState<OptimizationResult | null>(null);
  const { toast } = useToast();

  // Simulate the API call with file download for demo purposes
  const simulateOptimization = async () => {
    setLoadingStage('extracting');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setLoadingStage('analyzing');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setLoadingStage('optimizing');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setLoadingStage('generating');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Create a mock file download
    const optimizedContent = `JOHN SMITH - OPTIMIZED RESUME
Senior Software Engineer

[This would be the actual optimized resume content generated by AI]
Email: john.smith@email.com | Phone: (555) 123-4567
LinkedIn: linkedin.com/in/johnsmith | Portfolio: johnsmith.dev

PROFESSIONAL SUMMARY
Results-driven Senior Software Engineer with 8+ years of experience...
[Rest of optimized content would be here]`;

    const blob = new Blob([optimizedContent], { type: 'text/plain' });
    const downloadUrl = URL.createObjectURL(blob);
    
    return {
      fileName: `optimized-resume-${Date.now()}.txt`,
      downloadUrl
    };
  };

  const handleOptimize = async () => {
    if (!resumeFile || !jobDescription.trim()) {
      toast({
        title: "Missing Information",
        description: "Please upload your resume and enter a job description.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setResults(null);

    try {
      // In a real app, you would call your backend API here:
      // const formData = new FormData();
      // formData.append("resume_file", resumeFile);
      // formData.append("job_description", jobDescription);
      // 
      // const response = await fetch("https://your-api-url.com/optimize-resume", {
      //   method: "POST",
      //   body: formData,
      // });
      // 
      // if (!response.ok) {
      //   throw new Error(`HTTP error! status: ${response.status}`);
      // }
      // 
      // // Handle file download
      // const blob = await response.blob();
      // const filename = response.headers.get('Content-Disposition')?.split('filename=')[1] || 'optimized-resume.docx';
      // const downloadUrl = URL.createObjectURL(blob);
      // 
      // const data = { fileName: filename, downloadUrl };

      // For demo purposes, we'll simulate the API call
      const data = await simulateOptimization();
      
      setResults(data);
      
      toast({
        title: "Optimization Complete!",
        description: "Your optimized resume is ready for download.",
      });
    } catch (error) {
      console.error('Optimization failed:', error);
      toast({
        title: "Optimization Failed",
        description: "There was an error processing your request. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const canOptimize = resumeFile && jobDescription.trim().length > 50 && !isLoading;

  return (
    <div className="min-h-screen bg-background">
      <div className="container max-w-4xl mx-auto px-4 py-8">
        <Header />

        <div className="space-y-8">
          {/* Input Section */}
          {!results && (
            <div className="grid md:grid-cols-2 gap-6">
              <ResumeUploader
                onFileUpload={setResumeFile}
                uploadedFile={resumeFile}
                isLoading={isLoading}
              />
              <JobDescriptionInput
                value={jobDescription}
                onChange={setJobDescription}
                isLoading={isLoading}
              />
            </div>
          )}

          {/* Action Button */}
          {!results && !isLoading && (
            <div className="text-center">
              <Button
                onClick={handleOptimize}
                disabled={!canOptimize}
                size="lg"
                className="bg-gradient-primary hover:shadow-glow transition-all duration-300 px-8 py-4 text-lg"
              >
                <Zap className="w-5 h-5 mr-2" />
                Optimize My Resume
              </Button>
              
              {!canOptimize && (resumeFile || jobDescription) && (
                <p className="text-sm text-muted-foreground mt-2">
                  {!resumeFile && "Please upload your resume. "}
                  {!jobDescription.trim() && "Please enter a job description. "}
                  {jobDescription.trim() && jobDescription.trim().length < 50 && "Job description should be at least 50 characters."}
                </p>
              )}
            </div>
          )}

          {/* Loading State */}
          {isLoading && (
            <LoadingSpinner stage={loadingStage} />
          )}

          {/* Download Results */}
          {results && !isLoading && (
            <div className="space-y-6">
              <Card className="p-6 bg-gradient-card shadow-elegant">
                <div className="text-center space-y-4">
                  <div className="mx-auto w-16 h-16 bg-gradient-primary rounded-full flex items-center justify-center">
                    <Download className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-foreground">
                    Your Optimized Resume is Ready!
                  </h3>
                  <p className="text-muted-foreground">
                    AI has successfully optimized your resume for the job description.
                  </p>
                  
                  <div className="flex flex-col sm:flex-row gap-4 justify-center items-center pt-4">
                    <Button
                      onClick={() => {
                        const link = document.createElement('a');
                        link.href = results.downloadUrl;
                        link.download = results.fileName;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        
                        toast({
                          title: "Download Started",
                          description: "Your optimized resume is downloading now.",
                        });
                      }}
                      size="lg"
                      className="bg-gradient-primary hover:shadow-glow transition-all duration-300 px-8"
                    >
                      <Download className="w-5 h-5 mr-2" />
                      Download Optimized Resume
                    </Button>
                    
                    <Button
                      variant="outline"
                      onClick={() => {
                        setResults(null);
                        setResumeFile(null);
                        setJobDescription('');
                      }}
                      className="px-6"
                    >
                      Optimize Another Resume
                    </Button>
                  </div>
                </div>
              </Card>
            </div>
          )}
        </div>

        {/* Footer */}
        <footer className="mt-16 pt-8 border-t border-border text-center">
          <p className="text-sm text-muted-foreground">
            Resumate - Built with AI to help you land your dream job
          </p>
        </footer>
      </div>
    </div>
  );
};

export default Index;
